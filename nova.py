import pandas as pd
import numpy as np
import statsmodels.api as sm
from statsmodels.formula.api import ols
from scipy import stats
import seaborn as sns
import matplotlib.pyplot as plt

class AnalizadorEstadistico:
    """
    Clase definitiva para an√°lisis estad√≠sticos con limpieza de datos robusta.
    """
    def __init__(self, df):
        if not isinstance(df, pd.DataFrame):
            raise TypeError("La entrada debe ser un DataFrame de Pandas.")
        self.df = df
        print("Analizador Estad√≠stico listo.")

    def realizar_prueba_t(self, var_dependiente, var_grupo, alpha=0.05):
        """
        Realiza una Prueba t de Student y genera un boxplot para comparar
        las medias de DOS grupos.
        """
        print(f"\n--- Ejecutando Prueba t de Student para '{var_dependiente}' por '{var_grupo}' ---")
        
        # Validaci√≥n y limpieza de datos
        df_clean = self.df[[var_dependiente, var_grupo]].dropna()
        grupos = df_clean[var_grupo].unique()
        if len(grupos) != 2:
            print(f"‚ùå Error: La columna '{var_grupo}' debe tener exactamente 2 grupos. Encontrados: {len(grupos)}.")
            return

        grupo1 = df_clean[df_clean[var_grupo] == grupos[0]][var_dependiente]
        grupo2 = df_clean[df_clean[var_grupo] == grupos[1]][var_dependiente]

        # Prueba estad√≠stica
        t_stat, p_value = stats.ttest_ind(grupo1, grupo2)
        
        print(f"Estad√≠stico t: {t_stat:.4f}, Valor p: {p_value:.4f}")
        if p_value < alpha:
            print("‚úÖ Conclusi√≥n: La diferencia entre los promedios de los dos grupos es estad√≠sticamente significativa.")
        else:
            print("‚ùå Conclusi√≥n: No hay evidencia de una diferencia significativa entre los dos grupos.")

        # Boxplot
        print("\n--- Generando Visualizaci√≥n (Boxplot) ---")
        plt.figure(figsize=(8, 6))
        sns.boxplot(data=df_clean, x=var_grupo, y=var_dependiente)
        plt.title(f'Distribuci√≥n de {var_dependiente} por {var_grupo}')
        plt.xlabel(var_grupo)
        plt.ylabel(var_dependiente)
        plt.grid(True, linestyle='--', alpha=0.6)
        plt.show()

    def realizar_anova_un_factor(self, var_dependiente, var_grupo, alpha=0.05):
        """
        Realiza un ANOVA de un factor para comparar las medias de TRES O M√ÅS grupos.
        """
        print(f"\n--- Ejecutando ANOVA de Un Factor para '{var_dependiente}' por '{var_grupo}' ---")
        df_clean = self.df[[var_dependiente, var_grupo]].dropna()
        grupos_unicos = df_clean[var_grupo].unique()
        if len(grupos_unicos) < 3:
            print(f"‚ùå Error: Se recomienda usar ANOVA con 3 o m√°s grupos. Encontrados: {len(grupos_unicos)}. Considera usar una Prueba t.")
            return

        samples = [df_clean[df_clean[var_grupo] == grupo][var_dependiente] for grupo in grupos_unicos]
        
        f_stat, p_value = stats.f_oneway(*samples)
        
        print(f"Estad√≠stico F: {f_stat:.4f}, Valor p: {p_value:.4f}")
        if p_value < alpha:
            print("‚úÖ Conclusi√≥n: Existe una diferencia significativa entre los promedios de al menos dos de los grupos.")
            print("   >> Se recomienda realizar una prueba post-hoc (ej. Tukey HSD) para ver qu√© pares son diferentes.")
        else:
            print("‚ùå Conclusi√≥n: No hay evidencia de una diferencia significativa entre los promedios de los grupos.")

    def realizar_anova_dos_factores(self, var_dependiente, factor1, factor2, alpha=0.05):
        """
        Realiza un ANOVA de dos factores completo, incluyendo limpieza robusta,
        tabla de resultados, interpretaci√≥n y visualizaciones.
        """
        print(f"\n--- Ejecutando ANOVA de Dos Factores para '{var_dependiente}' por '{factor1}' y '{factor2}' ---")
        
        # 1. Validaci√≥n de existencia de columnas
        columnas_necesarias = [var_dependiente, factor1, factor2]
        if not all(col in self.df.columns for col in columnas_necesarias):
            raise ValueError(f"Una o m√°s columnas no se encuentran en el DataFrame. Se necesitan: {columnas_necesarias}")
        
        # 2. LIMPIEZA ROBUSTA Y DIAGN√ìSTICO
        print("\nPaso de limpieza y validaci√≥n de datos:")
        df_clean = self.df[columnas_necesarias].copy()
        
        # Forzar la conversi√≥n de la variable dependiente a num√©rica.
        df_clean[var_dependiente] = pd.to_numeric(df_clean[var_dependiente], errors='coerce')

        # Reemplazar infinitos (positivos y negativos) con NaN
        df_clean.replace([np.inf, -np.inf], np.nan, inplace=True)
        
        nans_antes = df_clean.isnull().sum().sum()
        if nans_antes > 0:
            print(f"  - Se encontraron y eliminar√°n {nans_antes} filas con valores NaN o infinitos.")
        
        df_clean.dropna(inplace=True)
        
        if df_clean.empty:
            print("‚ùå Error Cr√≠tico: No quedaron datos v√°lidos despu√©s de la limpieza. Revisa tu DataFrame original.")
            return
        
        print(f"  - El an√°lisis se realizar√° con {len(df_clean)} filas limpias.")
        
        # 3. Ajustar el modelo y continuar
        try:
            formula = f"{var_dependiente} ~ C({factor1}) + C({factor2}) + C({factor1}):C({factor2})"
            model = ols(formula, data=df_clean).fit()
            anova_table = sm.stats.anova_lm(model, typ=2)
            
            # Interpretaci√≥n y gr√°ficos
            print("\n--- Tabla de Resultados del ANOVA ---")
            display(anova_table)
            
            print("\n--- Interpretaci√≥n de los Resultados (p-valores) ---")
            p_value_factor1 = anova_table.loc[f"C({factor1})", "PR(>F)"]
            if p_value_factor1 < alpha: print(f"‚úÖ El factor '{factor1}' tiene un efecto significativo (p={p_value_factor1:.4f}).")
            else: print(f"‚ùå No hay evidencia de un efecto significativo del factor '{factor1}' (p={p_value_factor1:.4f}).")

            p_value_factor2 = anova_table.loc[f"C({factor2})", "PR(>F)"]
            if p_value_factor2 < alpha: print(f"‚úÖ El factor '{factor2}' tiene un efecto significativo (p={p_value_factor2:.4f}).")
            else: print(f"‚ùå No hay evidencia de un efecto significativo del factor '{factor2}' (p={p_value_factor2:.4f}).")

            interaction_term = f"C({factor1}):C({factor2})"
            p_value_interaction = anova_table.loc[interaction_term, "PR(>F)"]
            if p_value_interaction < alpha:
                print(f"‚úÖ Hay un efecto de interacci√≥n significativo (p={p_value_interaction:.4f}).")
                print("   >> El efecto de un factor depende del nivel del otro.")
            else: print(f"‚ùå No hay evidencia de un efecto de interacci√≥n significativo (p={p_value_interaction:.4f}).")

            print("\n--- Generando Visualizaciones ---")
            plt.figure(figsize=(10, 7)); sns.boxplot(data=df_clean, x=factor1, y=var_dependiente, hue=factor2); plt.title(f'Boxplot de {var_dependiente} por {factor1} y {factor2}'); plt.xlabel(factor1); plt.ylabel(var_dependiente); plt.grid(True, linestyle='--', alpha=0.6); plt.show()
            plt.figure(figsize=(8, 6)); sns.pointplot(data=df_clean, x=factor1, y=var_dependiente, hue=factor2, dodge=True, errorbar=None); plt.title(f'Gr√°fico de Interacci√≥n entre {factor1} y {factor2}'); plt.xlabel(factor1); plt.ylabel(f'Media de {var_dependiente}'); plt.grid(True, linestyle='--', alpha=0.6); plt.show()

        except Exception as e:
            print(f"\n‚ùå Ocurri√≥ un error inesperado durante el an√°lisis ANOVA: {e}")
            print("   >> Esto puede pasar si las columnas de factores tienen un solo valor despu√©s de limpiar los datos.")
            print("   >> Revisa las caracter√≠sticas de tus datos limpios a continuaci√≥n:")
            display(df_clean.describe(include='all'))


            import pandas as pd
import numpy as np

# --- 1. Crear un DataFrame de ejemplo con el problema ---
#    - 'ventas_ok' es num√©rica y limpia.
#    - 'unidades_mal' deber√≠a ser num√©rica, pero tiene texto.
#    - 'region' es de texto y est√° bien que lo sea.
fechas = pd.to_datetime(pd.date_range(start='2024-01-15', periods=4, freq='D'))
df = pd.DataFrame({
    'ventas_ok': [100.5, 150.2, 120.0, 200.8],
    'unidades_mal': ['50', '45', 'No Registrado', '30,0'],
    'region': ['Norte', 'Sur', 'Norte', 'Este']
}, index=fechas)

print("--- DataFrame Original ---")
display(df)
print("\n--- Tipos de Datos Originales ---")
df.info()
# Nota como 'unidades_mal' es de tipo 'object'


# --- 2. Diagn√≥stico: Encontrar la columna que falla ---
print("\n--- Buscando columnas problem√°ticas ---")
for columna in df.columns:
    # Solo intentamos convertir columnas que no sean ya num√©ricas
    if df[columna].dtype == 'object':
        # Intentamos la conversi√≥n forzando errores a NaN
        conversion_intento = pd.to_numeric(df[columna], errors='coerce')
        
        # Si la conversi√≥n gener√≥ alg√∫n NaN, encontramos una columna problem√°tica
        if conversion_intento.isnull().any():
            print(f"üö® ¬°Problema encontrado en la columna '{columna}'!")


# --- 3. Limpiar la columna identificada ---
# Basado en el diagn√≥stico, sabemos que 'unidades_mal' es el problema.
# La limpiamos y convertimos.
print("\n--- Limpiando la columna 'unidades_mal' ---")
df['unidades_mal'] = df['unidades_mal'].str.replace(',', '.', regex=False) # Reemplazar coma por punto
df['unidades_mal'] = pd.to_numeric(df['unidades_mal'], errors='coerce')
df.fillna(0, inplace=True) # Rellenamos el 'No Registrado' que se convirti√≥ en NaN


# --- 4. Ejecutar resample() de nuevo ---
# Ahora que TODAS las columnas num√©ricas est√°n limpias, el comando funcionar√°
print("\n--- Resample Exitoso ---")
resumen_semanal = df.resample('W').mean()
display(resumen_semanal)


import pandas as pd
import numpy as np

def limpiar_y_convertir_dataframe(df):
    """
    Itera sobre un DataFrame y convierte autom√°ticamente las columnas
    de tipo 'object' que parezcan num√©ricas a un formato num√©rico.
    
    :param df: El DataFrame de Pandas a limpiar.
    :return: Un nuevo DataFrame con las columnas limpias y convertidas.
    """
    print("--- Iniciando limpieza autom√°tica del DataFrame ---")
    df_limpio = df.copy() # Trabajar sobre una copia para no modificar el original
    
    for columna in df_limpio.columns:
        # Solo nos interesan las columnas de tipo 'object'
        if df_limpio[columna].dtype == 'object':
            print(f"Analizando columna '{columna}' (tipo object)...")
            
            # Intentar la conversi√≥n, forzando errores a NaN
            conversion_intento = pd.to_numeric(df_limpio[columna], errors='coerce')
            
            # Calcular cu√°ntos valores no eran num√©ricos
            num_nulos = conversion_intento.isnull().sum()
            total_valores = len(df_limpio[columna])
            
            # Si casi todos los valores se pudieron convertir, asumimos que es una columna num√©rica "sucia"
            # (El umbral del 90% es ajustable)
            if num_nulos < total_valores * 0.1: # Si menos del 10% de los valores fallaron
                print(f"  >> ¬°Conversi√≥n exitosa! La columna '{columna}' ahora es num√©rica.")
                df_limpio[columna] = conversion_intento
            else:
                print(f"  >> Se mantuvo como texto. No parece ser una columna num√©rica.")
                
    print("\n--- Limpieza autom√°tica finalizada ---")
    return df_limpio

# --- Ejemplo de Uso ---
# 1. DataFrame sucio con varios tipos de problemas
df_sucio = pd.DataFrame({
    'id_producto': ['SKU-001', 'SKU-002', 'SKU-003'],
    'precio': ['$1,500.50', '‚Ç¨2,100.20', '850'],
    'stock': ['50', '45', 'No Registrado'],
    'valoracion': ['4.5', '3.8', '5.0']
})
print("--- DataFrame Original ---")
df_sucio.info()

# 2. Aplicar la funci√≥n de limpieza autom√°tica
df_limpio = limpiar_y_convertir_dataframe(df_sucio)

# 3. Revisar los resultados
print("\n--- DataFrame Limpio ---")
df_limpio.info()


def limpiar_y_convertir_dataframe_robusto(df):
    """
    Versi√≥n mejorada que primero limpia las columnas de texto y luego
    intenta convertirlas a un formato num√©rico.

    :param df: El DataFrame de Pandas a limpiar.
    :return: Un nuevo DataFrame con las columnas limpias y convertidas.
    """
    print("--- Iniciando limpieza autom√°tica robusta ---")
    df_limpio = df.copy()
    
    for columna in df_limpio.columns:
        # Solo nos interesan las columnas de tipo 'object' (texto)
        if pd.api.types.is_object_dtype(df_limpio[columna]):
            print(f"Analizando la columna de texto '{columna}'...")
            
            # 1. Limpieza primero: creamos una versi√≥n temporal limpia de la columna
            #    Quitamos espacios, comas, y s√≠mbolos de moneda comunes
            try:
                columna_temporal_limpia = df_limpio[columna].str.strip().str.replace('[$,‚Ç¨]', '', regex=True)
            except AttributeError:
                # Esto puede pasar si la columna 'object' contiene datos no-string (ej. n√∫meros mezclados)
                print(f"  >> No se pudo aplicar limpieza de texto a '{columna}'. Se omite.")
                continue

            # 2. Intentamos la conversi√≥n en la versi√≥n limpia
            conversion_intento = pd.to_numeric(columna_temporal_limpia, errors='coerce')
            
            # 3. Verificamos si la conversi√≥n fue exitosa en la mayor√≠a de los casos
            #    (Si al menos un valor se pudo convertir, procedemos)
            if conversion_intento.notna().any():
                print(f"  >> ¬°Conversi√≥n exitosa! La columna '{columna}' ahora es num√©rica.")
                # Reemplazamos la columna original con la versi√≥n num√©rica
                df_limpio[columna] = conversion_intento
            else:
                print(f"  >> Se mantuvo como texto. No parece ser una columna num√©rica.")
                
    print("\n--- Limpieza autom√°tica finalizada ---")
    return df_limpio



import pandas as pd
import numpy as np
import statsmodels.api as sm
from statsmodels.formula.api import ols
from scipy import stats
import seaborn as sns
import matplotlib.pyplot as plt

class AnalizadorEstadistico:
    """
    Kit de herramientas definitivo para an√°lisis estad√≠sticos, incluyendo
    limpieza autom√°tica y pruebas de supuestos.
    """
    def __init__(self, df):
        if not isinstance(df, pd.DataFrame):
            raise TypeError("La entrada debe ser un DataFrame de Pandas.")
        self.df = self._limpiar_automaticamente(df)
        print("\nAnalizador Estad√≠stico listo con datos limpios.")

    def _limpiar_automaticamente(self, df):
        print("--- Iniciando limpieza autom√°tica del DataFrame ---")
        df_limpio = df.copy()
        for col in df_limpio.columns:
            if pd.api.types.is_object_dtype(df_limpio[col]):
                try:
                    # Limpia caracteres comunes y espacios
                    temp_col = df_limpio[col].str.replace('[$,‚Ç¨,]', '', regex=True).str.strip()
                    conversion = pd.to_numeric(temp_col, errors='coerce')
                    # Si la mayor√≠a (>80%) se convierte, reemplaza la columna
                    if conversion.notna().sum() / len(df_limpio) > 0.8:
                        print(f"  >> Columna '{col}' convertida a tipo num√©rico.")
                        df_limpio[col] = conversion
                except Exception:
                    # Si falla (ej. la columna object no contiene solo strings), se omite
                    pass
        print("--- Limpieza finalizada ---")
        return df_limpio

    # --- M√âTODOS DE DIAGN√ìSTICO (SUPUESTOS) ---
    def probar_normalidad_shapiro(self, columna_valor, alpha=0.05):
        """
        Realiza la prueba de Shapiro-Wilk sobre una columna para verificar la normalidad.
        """
        print(f"\n--- Prueba de Normalidad (Shapiro-Wilk) para '{columna_valor}' ---")
        print("H0: La muestra proviene de una distribuci√≥n normal.")
        
        datos = self.df[columna_valor].dropna()
        if len(datos) < 3:
            print("‚ùå Error: Se necesitan al menos 3 puntos de datos para la prueba de Shapiro-Wilk.")
            return

        stat, p_value = stats.shapiro(datos)
        print(f"Estad√≠stico W: {stat:.4f}, Valor p: {p_value:.4f}")
        if p_value < alpha:
            print("Conclusi√≥n: -> ‚ùå (No normal). Se rechaza la hip√≥tesis nula.")
        else:
            print("Conclusi√≥n: -> ‚úÖ (Normal). No se puede rechazar la hip√≥tesis nula.")

    def probar_homogeneidad_levene(self, var_dependiente, var_grupo, alpha=0.05):
        """
        Realiza la prueba de Levene para la homogeneidad de varianzas entre grupos.
        """
        print(f"\n--- Prueba de Homogeneidad de Varianzas (Levene) para '{var_dependiente}' por '{var_grupo}' ---")
        print("H0: Las varianzas de todos los grupos son iguales.")
        
        df_clean = self.df[[var_dependiente, var_grupo]].dropna()
        samples = [group[var_dependiente].values for name, group in df_clean.groupby(var_grupo)]
        
        stat, p_value = stats.levene(*samples)
        print(f"Estad√≠stico de Levene: {stat:.4f}, Valor p: {p_value:.4f}")
        if p_value < alpha:
            print("Conclusi√≥n: -> ‚ùå (Las varianzas NO son homog√©neas). La suposici√≥n no se cumple.")
        else:
            print("Conclusi√≥n: -> ‚úÖ (Las varianzas son homog√©neas). La suposici√≥n se cumple.")

    # --- M√âTODOS DE AN√ÅLISIS ---
    def realizar_prueba_t(self, var_dependiente, var_grupo, alpha=0.05):
        """
        Realiza una Prueba t de Student y genera un boxplot para comparar las medias de DOS grupos.
        """
        print(f"\n--- Ejecutando Prueba t de Student para '{var_dependiente}' por '{var_grupo}' ---")
        
        df_clean = self.df[[var_dependiente, var_grupo]].dropna()
        grupos = df_clean[var_grupo].unique()
        if len(grupos) != 2:
            print(f"‚ùå Error: La columna '{var_grupo}' debe tener exactamente 2 grupos. Encontrados: {len(grupos)}.")
            return

        grupo1 = df_clean[df_clean[var_grupo] == grupos[0]][var_dependiente]
        grupo2 = df_clean[df_clean[var_grupo] == grupos[1]][var_dependiente]

        t_stat, p_value = stats.ttest_ind(grupo1, grupo2)
        
        print(f"Estad√≠stico t: {t_stat:.4f}, Valor p: {p_value:.4f}")
        if p_value < alpha:
            print("‚úÖ Conclusi√≥n: La diferencia entre los promedios es estad√≠sticamente significativa.")
        else:
            print("‚ùå Conclusi√≥n: No hay evidencia de una diferencia significativa.")

        print("\n--- Generando Visualizaci√≥n (Boxplot) ---")
        plt.figure(figsize=(8, 6)); sns.boxplot(data=df_clean, x=var_grupo, y=var_dependiente); plt.title(f'Distribuci√≥n de {var_dependiente} por {var_grupo}'); plt.xlabel(var_grupo); plt.ylabel(var_dependiente); plt.grid(True, linestyle='--', alpha=0.6); plt.show()

    def realizar_anova_un_factor(self, var_dependiente, var_grupo, alpha=0.05):
        """
        Realiza un ANOVA de un factor para comparar las medias de TRES O M√ÅS grupos.
        """
        print(f"\n--- Ejecutando ANOVA de Un Factor para '{var_dependiente}' por '{var_grupo}' ---")
        
        df_clean = self.df[[var_dependiente, var_grupo]].dropna()
        grupos_unicos = df_clean[var_grupo].unique()
        if len(grupos_unicos) < 3:
            print(f"‚ùå Error: Se recomienda usar ANOVA con 3 o m√°s grupos. Encontrados: {len(grupos_unicos)}. Considera usar una Prueba t.")
            return

        samples = [df_clean[df_clean[var_grupo] == grupo][var_dependiente] for grupo in grupos_unicos]
        f_stat, p_value = stats.f_oneway(*samples)
        
        print(f"Estad√≠stico F: {f_stat:.4f}, Valor p: {p_value:.4f}")
        if p_value < alpha:
            print("‚úÖ Conclusi√≥n: Existe una diferencia significativa entre los promedios de al menos dos grupos.")
            print("   >> Se recomienda realizar una prueba post-hoc (ej. Tukey HSD) para ver qu√© pares son diferentes.")
        else:
            print("‚ùå Conclusi√≥n: No hay evidencia de una diferencia significativa entre los promedios.")
            
    def realizar_anova_dos_factores(self, var_dependiente, factor1, factor2, alpha=0.05):
        """
        Realiza un ANOVA de dos factores completo con interpretaci√≥n y visualizaciones.
        """
        print(f"\n--- Ejecutando ANOVA de Dos Factores para '{var_dependiente}' por '{factor1}' y '{factor2}' ---")
        
        df_clean = self.df[[var_dependiente, factor1, factor2]].dropna()
        if df_clean.empty:
            print("‚ùå Error: No hay datos v√°lidos para el an√°lisis tras eliminar NaNs.")
            return
        
        formula = f"{var_dependiente} ~ C({factor1}) + C({factor2}) + C({factor1}):C({factor2})"
        model = ols(formula, data=df_clean).fit()
        anova_table = sm.stats.anova_lm(model, typ=2)
        
        print("\n--- Tabla de Resultados del ANOVA ---"); display(anova_table)
        
        print("\n--- Interpretaci√≥n de los Resultados (p-valores) ---")
        p_value_factor1 = anova_table.loc[f"C({factor1})", "PR(>F)"]
        if p_value_factor1 < alpha: print(f"‚úÖ El factor '{factor1}' tiene un efecto significativo (p={p_value_factor1:.4f}).")
        else: print(f"‚ùå No hay evidencia de un efecto significativo del factor '{factor1}' (p={p_value_factor1:.4f}).")
        
        p_value_factor2 = anova_table.loc[f"C({factor2})", "PR(>F)"]
        if p_value_factor2 < alpha: print(f"‚úÖ El factor '{factor2}' tiene un efecto significativo (p={p_value_factor2:.4f}).")
        else: print(f"‚ùå No hay evidencia de un efecto significativo del factor '{factor2}' (p={p_value_factor2:.4f}).")
            
        interaction_term = f"C({factor1}):C({factor2})"
        p_value_interaction = anova_table.loc[interaction_term, "PR(>F)"]
        if p_value_interaction < alpha:
            print(f"‚úÖ Hay un efecto de interacci√≥n significativo (p={p_value_interaction:.4f})."); print("   >> El efecto de un factor depende del nivel del otro.")
        else: print(f"‚ùå No hay evidencia de un efecto de interacci√≥n significativo (p={p_value_interaction:.4f}).")

        print("\n--- Generando Visualizaciones ---")
        plt.figure(figsize=(10, 7)); sns.boxplot(data=df_clean, x=factor1, y=var_dependiente, hue=factor2); plt.title(f'Boxplot de {var_dependiente} por {factor1} y {factor2}'); plt.xlabel(factor1); plt.ylabel(var_dependiente); plt.grid(True, linestyle='--', alpha=0.6); plt.show()
        plt.figure(figsize=(8, 6)); sns.pointplot(data=df_clean, x=factor1, y=var_dependiente, hue=factor2, dodge=True, errorbar=None); plt.title(f'Gr√°fico de Interacci√≥n entre {factor1} y {factor2}'); plt.xlabel(factor1); plt.ylabel(f'Media de {var_dependiente}'); plt.grid(True, linestyle='--', alpha=0.6); plt.show()